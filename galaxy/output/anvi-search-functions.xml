<tool id="anvi_search_functions" name="anvi-search-functions" version="5.3">
    <description>Search functions in an anvi'o contigs database or genomes storage. Basically, this program searches for one                                                   or more search terms you define in functional annotations of genes in an anvi'o contigs database, and generates                                                   multiple reports. The simpler report (which also is the default one) simply tells you which contigs contain genes                                                   with functions matching to serach terms you used. This file is only useful to quickly highlight matching contigs                                                   in the interface by providing it to the anvi-interactive with the `--additional-layer` parameter. You can also                                                   request a much more comprehensive report, which gives you anything you might need to know, including the matching                                                  gene caller id, functional annotation source, and full function name for each hit and serach term.</description>
    <requirements>
        <requirement type="package" version="5.3">anvio</requirement>
    </requirements>
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <version_command>anvi-search-functions --version</version_command>
    <command><![CDATA[
        
    #if $input_contigs_db:
        cp -R '${input_contigs_db.extra_files_path}' '${output_contigs_db.extra_files_path}'
    #else
        echo ''
    #end if
 && 

    #if $input_pan_db:
        cp -R '${input_pan_db.extra_files_path}' '${output_pan_db.extra_files_path}'
    #else
        echo ''
    #end if
 && 

    #if $input_genomes_storage:
        cp -R '${input_genomes_storage.extra_files_path}' '${output_genomes_storage.extra_files_path}'
    #else
        echo ''
    #end if
 &&
 anvi-search-functions
--contigs-db '${output_contigs_db.extra_files_path}/CONTIGS.db'


#if $output_pan_db:
    --pan-db '${output_pan_db.extra_files_path}/${output_pan_db.metadata.anvio_basename}'
#end if


#if $output_genomes_storage:
    --genomes-storage '${output_genomes_storage.extra_files_path}/${output_genomes_storage.metadata.anvio_basename}'
#end if

--search-terms '${search_terms}'


#if $str( $delimiter ):
    --delimiter '${delimiter}'
#end if


#if $str( $annotation_sources ):
    --annotation-sources '${annotation_sources}'
#end if

${list_annotation_sources}


#if $output_file:
    --output-file '${output_file}'
#end if


#if $full_report:
    --full-report '${full_report}'
#end if

${include_sequences}

${verbose}

&> '${GALAXY_ANVIO_LOG}'

    ]]></command>
    <inputs>
        <param name="input_contigs_db" type="data" label="Contigs Db" format="anvio_contigs_db" optional="True" multiple="False" argument="--contigs-db" help="Anvi'o contigs database generated by 'anvi-gen-contigs'"/>
        <param name="input_pan_db" type="data" label="Pan Db" format="anvio_pan_db" optional="True" multiple="False" argument="--pan-db" help="Anvi'o pan database"/>
        <param name="input_genomes_storage" type="data" label="Genomes Storage" format="anvio_genomes_db" optional="True" multiple="False" argument="--genomes-storage" help="Anvi'o genomes storage file"/>
        <param name="search_terms" type="text" label="Search Terms" value="" optional="False" argument="--search-terms" help="Search terms. Multiple of them can be declared separated by a delimiter (the default is a comma)."/>
        <param name="delimiter" type="text" label="Delimiter" value="," optional="True" argument="--delimiter" help="The delimiter to parse multiple input terms. The default is '%(default)s'."/>
        <param name="annotation_sources" type="text" label="Annotation Sources" value="" optional="True" argument="--annotation-sources" help="Get functional annotations for a specific list of annotation sources. You can specifiy one or more sources by separating them from each other with a comma character (i.e., '--annotation-sources source_1,source_2,source_3'). The default behavior is to return everything"/>
        <param name="list_annotation_sources" type="boolean" label="List Annotation Sources" truevalue="--list-annotation-sources" falsevalue="" checked="False" optional="True" argument="--list-annotation-sources" help="List available functional annotation sources."/>
        <param name="include_sequences" type="boolean" label="Include Sequences" truevalue="--include-sequences" falsevalue="" checked="False" optional="True" argument="--include-sequences" help="Include sequences in the report."/>
        <param name="verbose" type="boolean" label="Verbose" truevalue="--verbose" falsevalue="" checked="False" optional="True" argument="--verbose" help="Be verbose, print more messages whenever possible."/>
    </inputs>
    <outputs>
        <data name="output_contigs_db" format="anvio_contigs_db" format_source="input_contigs_db" metadata_source="input_contigs_db" label="${tool.name} on ${on_string}: Contigs Db"/>
        <data name="output_pan_db" format="anvio_pan_db" format_source="input_pan_db" metadata_source="input_pan_db" label="${tool.name} on ${on_string}: Pan Db"/>
        <data name="output_genomes_storage" format="anvio_genomes_db" format_source="input_genomes_storage" metadata_source="input_genomes_storage" label="${tool.name} on ${on_string}: Genomes Storage"/>
        <data name="output_file" format="txt" format_source="input_output_file" metadata_source="input_output_file" label="${tool.name} on ${on_string}: Output File"/>
        <data name="full_report" format="txt" format_source="input_full_report" metadata_source="input_full_report" label="${tool.name} on ${on_string}: Full Report"/>
        <data name="GALAXY_ANVIO_LOG" format="txt" label="${tool.name} on ${on_string}: Log"/>
    </outputs>
    <help><![CDATA[
        usage: anvi-search-functions [-h] [-c CONTIGS_DB] [-p PAN_DB]
                              [-g GENOMES_STORAGE] --search-terms SEARCH_TERMS
                              [--delimiter CHAR]
                              [--annotation-sources SOURCE NAME[S]] [-l]
                              [-o FILE_PATH] [--full-report FILE_NAME]
                              [--include-sequences] [--verbose]

Search functions in an anvi'o contigs database or genomes storage. Basically,
this program searches for one or more search terms you define in functional
annotations of genes in an anvi'o contigs database, and generates multiple
reports. The simpler report (which also is the default one) simply tells you
which contigs contain genes with functions matching to serach terms you used.
This file is only useful to quickly highlight matching contigs in the
interface by providing it to the anvi-interactive with the `--additional-
layer` parameter. You can also request a much more comprehensive report, which
gives you anything you might need to know, including the matching gene caller
id, functional annotation source, and full function name for each hit and
serach term.

optional arguments:
  -h, --help            show this help message and exit
  -c CONTIGS_DB, --contigs-db CONTIGS_DB
                        Anvi'o contigs database generated by 'anvi-gen-
                        contigs'
  -p PAN_DB, --pan-db PAN_DB
                        Anvi'o pan database
  -g GENOMES_STORAGE, --genomes-storage GENOMES_STORAGE
                        Anvi'o genomes storage file
  --search-terms SEARCH_TERMS
                        Search terms. Multiple of them can be declared
                        separated by a delimiter (the default is a comma).
  --delimiter CHAR      The delimiter to parse multiple input terms. The
                        default is ','.
  --annotation-sources SOURCE NAME[S]
                        Get functional annotations for a specific list of
                        annotation sources. You can specifiy one or more
                        sources by separating them from each other with a
                        comma character (i.e., '--annotation-sources
                        source_1,source_2,source_3'). The default behavior is
                        to return everything
  -l, --list-annotation-sources
                        List available functional annotation sources.
  -o FILE_PATH, --output-file FILE_PATH
                        File path to store results.
  --full-report FILE_NAME
                        Optional output file with a fuller description of
                        findings.
  --include-sequences   Include sequences in the report.
  --verbose             Be verbose, print more messages whenever possible.

SEARCH IN:
  Relevant source databases

SEARCH FOR:
  Relevant terms

REPORT:
  Anvi'o can report the hits in multiple ways. The output file will be a
  very simple 2-column TAB-delimited output that is compatible with anvi'o
  additional data format (so you can give it to the `anvi-interactive` to
  see which splits contained genes that were matching to your search terms).
  You can also ask anvi'o to generate a full-report, that contains much more
  and much helpful information about each hit. Optionally you can even ask
  the gene seqeunces to appear in this report.

    ]]></help>
    <citations>
        <citation type="doi">10.7717/peerj.1319</citation>
        <citation type="bibtex">@ARTICLE{Blankenberg19-anvio,
   author = {Daniel Blankenberg, et al},
   title = {In preparation..},
   }</citation>
    </citations>
</tool>